## Source plug
source "%val{config}/plugins/plug.kak/rc/plug.kak"
#
## Plugins
#plug "alexherbo2/volatile-highlighter.kak"
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
} config %{
    hook global WinSetOption filetype=(rust|kak|typescript|tsx) expandtab
    hook global WinSetOption filetype=(sfg) smarttab
    #hook global WinSetOption filetype=(c) softtabstop 2
}
plug "https://framagit.org/koyasik/kakoune-gdscript"
plug "chambln/kakoune-readline"
plug "ul/kak-lsp" do %{
    cargo install --locked --force --path .
}
plug "https://gitlab.com/Screwtapello/kakoune-cargo"
#plug "listentolist/kakoune-rainbow" domain "gitlab.com" config %{
#    require-module rainbow
#    # suggested mapping
#    # map global user r ": rainbow<ret>" -docstring "rainbow brackets"
#    # map global user R ": rmhl window/ranges_rainbow_specs<ret>" \
#    #     -docstring "remove rainbow highlighter"
#}
plug "stoand/kakoune-idris"
plug "more-filetypes"
# prolog and perl need to duke it out already
hook global BufCreate .*\.(pl)? %{
    set-option buffer filetype perl
}

# This is slow, but, otherwise kak-lsp logs basically nothing.   A compromise
# may be possible.   As soon as LSP is funky, turn this on
set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

colorscheme edgie

set global tabstop 4
map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'
set global scrolloff 5,5

# Soft wrap
addhl global/ wrap -indent -marker 'â†’'
# Show matching
addhl global/ show-matching
# Hard wrap on = (vim gq)
map global normal = '|fmt -w $kak_opt_autowrap_column -g $kak_opt_autowrap_column<ret>'

# Vim-like scrolling
map global normal <c-e> 'vj'
map global normal <c-y> 'vk'

# :x to exit
alias global x write-quit
alias global bd delete-buffer

# kakoune seems only to provide <tab> as a shortcut here because <c-i> maps to
# <tab> in most legacy terminals.   But since then, kakoune and kitty have both
# supported a new protocal in which they're differentiated.    So, to simulate
# tho old behavior we have to remap the nonsense
map global normal <c-i> <tab>

# Line numbers
add-highlighter global/ number-lines -relative -hlcursor

map global normal \' ':lsp-hover<ret>'
map global normal <F2> ':lsp-rename-prompt<ret>'
map global normal <a-'> ':lsp-code-actions<ret>'

# Things that need to be on window create go here
hook global WinCreate .* %{
    #volatile-highlighter-enable
}

# maybe |python|go|javascript
hook global WinSetOption filetype=(tsx|typescript|java|cpp|c|ocaml) %{
    lsp-enable-window
    lsp-auto-signature-help-enable
}

hook global BufCreate .*[.](notwasm) %{
    set-option buffer filetype typescript
}

# preserve indentation
hook global WinSetOption filetype=sfg %{
    hook global InsertChar \n %{ exec -draft k<a-x> s^\h+<ret>y j<a-h>P }
}

# idris2
map global normal <minus> ':enter-user-mode idris-ide<ret>'

# rustfmt
# filetype=rust somehow?
#hook global BufWritePre .* %{
#    format
#}

# copied from wiki-ide
def ide %{
    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    new rename-client docs
    set global docsclient docs
}

# sleuth
#hook global BufOpenFile .* %{ evaluate-commands -buffer %val(hook_param) %{ try %{
  #execute-keys '%s^\t<ret>'
  #smarttab
#}}}

# copied from https://gitlab.com/Screwtapello/kakoune-cargo
hook global WinSetOption filetype=rust %{
    # If rustfmt is available, let's set up formatting.
    set-option window formatcmd rustfmt
    hook -group rust-auto-format window BufWritePre .* format
    lsp-enable-window
    lsp-auto-signature-help-enable
    hook global WinSetOption filetype=(?!rust).* %{
        remove-hooks window rust-auto-format
    }
}

hook global WinSetOption filetype=fsharp %{
    lsp-enable-window
    lsp-auto-signature-help-enable
}

hook global WinSetOption filetype=(tsx|typescript) %{
    set global tabstop 2
    set global tabstop 2
    # Yeah turns out we don't actually use prettier hahahah
    #set-option window formatcmd 'sh -c "NVM_DIR=$HOME/.nvm . ~/.nvm/nvm.sh && prettier --stdin-filepath something.tsx"'
    #set-option buffer lintcmd 'sh -c "NVM_DIR=$HOME/.nvm . ~/.nvm/nvm.sh && npx eslint --config .eslintrc.json --format=/home/luna/.nvm/versions/node/v15.5.1/lib/node_modules/eslint-formatter-kakoune" --stdin-filepath something.tsx'
    #set-option buffer lintcmd 'cat $HOME/lint'
    #lint-enable
    #hook -group ts-auto-format window BufWritePre .* format
    #hook -group ts-auto-format window BufWritePre .* lint
    lsp-enable-window
    lsp-auto-signature-help-enable
    hook global WinSetOption filetype=(?!(tsx|typescript)).* %{
        remove-hooks window ts-auto-format
    }
}

